#!/usr/bin/env node

var broccoli = require('broccoli');
var Watcher = require('broccoli/lib/watcher');
var middleware = require('broccoli/lib/middleware');
var tinylr = require('tiny-lr');

var app = require('./api/server');

var tree = broccoli.loadBrocfile();
var builder = new broccoli.Builder(tree);
var watcher = new Watcher(builder, {verbose: true});

function serve (app, builder, options) {
  options = options || {}

  console.log('Serving on http://' + options.host + ':' + options.port + '\n')

  var watcher = options.watcher;
  app.use(middleware(watcher));
  app.listen(parseInt(options.port, 10), options.host);

  // var lrPort = 35729;
  //
  // var lrServer = tinylr().listen(lrPort, function() {
  //   console.log('LiveReload Listening on %s ...', lrPort);
  // });

  // We register these so the 'exit' handler removing temp dirs is called
  function cleanupAndExit() {
    builder.cleanup().catch(function(err) {
      console.error('Cleanup error:')
      console.error(err && err.stack ? err.stack : err)
      lrServer.close();
    }).finally(function() {
      process.exit(1)
    })
  }

  process.on('SIGINT', cleanupAndExit)
  process.on('SIGTERM', cleanupAndExit)

  watcher.on('change', function(results) {
    console.log('Built - ' + Math.round(results.totalTime / 1e6) + ' ms @ ' + new Date().toString())
  })

  watcher.on('error', function(err) {
    console.log('Built with error:')
    // Should also show file and line/col if present; see cli.js
    if (err.file) {
      console.log('File: ' + err.file)
    }
    console.log(err.stack)
    console.log('')
  })

}

serve(app, builder, {
  watcher: watcher,
  host: 'localhost',
  port: '4200'
});
